
name: JfrogReportTest.$(Date:yyyyMMdd).$(Rev:rr)
trigger: none

parameters:
- name: enabled
  type: boolean
  default: true


jobs:
  - job: npm_install_and_nuget_restore_from_Jfrog_with_upload_buildinfo
    #choose windows hosted agent      
    displayName: npm install and nuget restore from Jfrog with upload buildinfo
    continueOnError: false
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      buildConfiguration: 'Release'
      
    steps:

    - task: NodeTool@0
      displayName: Node install
      inputs:
        versionSpec: '14.15.1' # The version we're installing
      enabled: ${{ parameters.enabled }}

#    - task: Bash@3
#      inputs:
#        targetType: 'inline'
#        script: |          # Write your commands here
          # echo 'npm packages location'
          # sudo find / -name "react"
#          npm install react react-dom

#    - task: Npm@1
#      inputs:
#        command: 'install'

    - task: ArtifactoryNpm@2
      enabled: ${{ parameters.enabled }}
      displayName: npm install from artifactory
      inputs:
        command: 'install'
        artifactoryService: 'JfrogArtifactory'
        sourceRepo: 'npm-remote'
        collectBuildInfo: true
        threads: '1'
        buildName: 'jfrog-build-info-test'
        buildNumber: '$(Build.BuildNumber)' 
#      env:
#        HTTPS_PROXY: $(https_proxy)

    - task: JfrogCli@1
      inputs:
        artifactoryService: 'JfrogArtifactory'
        command: 'jfrog rt dl generic-local/access.war'
    - task: ArtifactoryDotnetCore@1

      #enabled: ${{ parameters.enabled }}
      displayName: "dotnet restore from Jfrog Artifactory for all projects in .sln"
      inputs:
        artifactoryService: "JfrogArtifactory"
        targetResolveRepo: "nuget"
        command: restore
        rootPath: '$(Build.SourcesDirectory)/test.csproj'
        arguments: '-r linux-x64'
        collectBuildInfo: true
        buildName: 'jfrog-build-info-test'
        buildNumber: '$(Build.BuildNumber)'
        verbosityRestore: Normal
#      env:
#        HTTPS_PROXY: $(https_proxy)

    - task: ArtifactoryPublishBuildInfo@1
      #enabled: ${{ parameters.enabled }}
      displayName: "Send build info to JFrog"
      inputs:
        artifactoryService: "JfrogArtifactory"
        buildName: 'jfrog-build-info-test'
        buildNumber: '$(Build.BuildNumber)'
#      env:
#        HTTPS_PROXY: $(https_proxy)

#    - task: Bash@3
#      inputs:
#        targetType: 'inline'
#        script: |
          # Write your commands here
          
          # echo 'npm packages location'
          # sudo find / -name "react"
          #echo 'nuget packages location'
          
          #echo 'locating bootstrap'
          #sudo find / -name "bootstrap"
          
          #echo 'locating jQuery'
          #sudo find / -name "jQuery"
          
          #echo 'locating Microsoft.Bcl'
          #sudo find / -name "Microsoft.Bcl"
          
          #echo 'locating Microsoft.Net.Http'
          #sudo find / -name "Microsoft.Net.Http"
          
          #echo 'locating Microsoft.Bcl.Build'
          #sudo find / -name "Microsoft.Bcl.Build"
          
          #echo 'locating Newtonsoft.Json'
          #sudo find / -name "Newtonsoft.Json"
          
          #echo 'locating NUnit'
          #sudo find / -name "NUnit"

          #echo 'locating popper.js'
          #sudo find / -name "popper.js"
